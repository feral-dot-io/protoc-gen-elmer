-- Generated by protoc-gen-elmgen. DO NOT EDIT!


module Codec exposing (..)

-- This module is broken down into: records (messages), unions (enums), oneofs, empty constructors (zero values), decoders, and encoders
-- Records: Multi
-- Unions: (none)
-- Oneofs: Multi_PickOne Multi_PickAnother

import Protobuf.Decode as PD
import Protobuf.Encode as PE



-- Records from messages


type alias Multi =
    { pickOne : Maybe Multi_PickOne
    , pickAnother : Maybe Multi_PickAnother
    }



-- Unions from enums
-- Oneofs from messages


type Multi_PickOne
    = Multi_PickOne_AStr String
    | Multi_PickOne_ABool Bool


type Multi_PickAnother
    = Multi_PickAnother_BStr String
    | Multi_PickAnother_BNum Int



-- Zero (empty) record constructors


emptyMulti : Multi
emptyMulti =
    Multi Nothing Nothing



-- Zero (empty) union constructors
-- Record decoders


decodeMulti : PD.Decoder Multi
decodeMulti =
    let
        decodeMulti_PickOne =
            [ ( 1, PD.map Multi_PickOne_AStr PD.string )
            , ( 2, PD.map Multi_PickOne_ABool PD.bool )
            ]

        decodeMulti_PickAnother =
            [ ( 3, PD.map Multi_PickAnother_BStr PD.string )
            , ( 4, PD.map Multi_PickAnother_BNum PD.int32 )
            ]
    in
    PD.message emptyMulti
        [ PD.oneOf decodeMulti_PickOne (\v m -> { m | pickOne = v })
        , PD.oneOf decodeMulti_PickAnother (\v m -> { m | pickAnother = v })
        ]



-- Union decoders
-- Record encoders


encodeMulti : Multi -> PE.Encoder
encodeMulti v =
    let
        encodeMulti_PickOne o =
            case o of
                Just (Multi_PickOne_AStr data) ->
                    [ ( 1, PE.string data ) ]

                Just (Multi_PickOne_ABool data) ->
                    [ ( 2, PE.bool data ) ]

                Nothing ->
                    []

        encodeMulti_PickAnother o =
            case o of
                Just (Multi_PickAnother_BStr data) ->
                    [ ( 3, PE.string data ) ]

                Just (Multi_PickAnother_BNum data) ->
                    [ ( 4, PE.int32 data ) ]

                Nothing ->
                    []
    in
    PE.message <|
        []
            ++ encodeMulti_PickOne v.pickOne
            ++ encodeMulti_PickAnother v.pickAnother



-- Union encoders
