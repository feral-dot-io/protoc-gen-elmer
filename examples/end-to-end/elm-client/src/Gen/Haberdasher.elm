-- Generated by protoc-gen-elmgen. DO NOT EDIT!


module Gen.Haberdasher exposing (..)

-- This module is broken down into: records (messages), unions (enums), oneofs, empty constructors (zero values), decoders, and encoders
-- Records: Hat Size
-- Unions: (none)
-- Oneofs: (none)

import Protobuf.Decode as PD
import Protobuf.Encode as PE


type alias Hat =
    { size : Int
    , color : String
    , name : String
    }


type alias Size =
    { inches : Int
    }


emptyHat : Hat
emptyHat =
    Hat 0 "" ""


emptySize : Size
emptySize =
    Size 0


hatDecoder : PD.Decoder Hat
hatDecoder =
    PD.message emptyHat
        [ PD.optional 1 PD.int32 (\v m -> { m | size = v })
        , PD.optional 2 PD.string (\v m -> { m | color = v })
        , PD.optional 3 PD.string (\v m -> { m | name = v })
        ]


sizeDecoder : PD.Decoder Size
sizeDecoder =
    PD.message emptySize
        [ PD.optional 1 PD.int32 (\v m -> { m | inches = v })
        ]


hatEncoder : Hat -> PE.Encoder
hatEncoder v =
    PE.message <|
        [ ( 1, PE.int32 v.size )
        , ( 2, PE.string v.color )
        , ( 3, PE.string v.name )
        ]


sizeEncoder : Size -> PE.Encoder
sizeEncoder v =
    PE.message <|
        [ ( 1, PE.int32 v.inches )
        ]
